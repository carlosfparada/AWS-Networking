---

- name: Create VPC {{ item.ec2_vpc_name }}
  amazon.aws.ec2_vpc_net:
    name: "{{ item.ec2_vpc_name }}"
    cidr_block: "{{ item.ec2_vpc_cidr }}"
    region: "{{ item.ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ item.ec2_vpc_name }}"
  register: vpc

- name: Create Subnet in VPC {{ item.ec2_subnet_name }}
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ item.ec2_subnet_cidr }}"
    region: "{{ item.ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ item.ec2_subnet_name }}"
  register: subnet

- name: Create Internet Gateway (IGW) {{ item.ec2_igw_name }}
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ item.ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ item.ec2_igw_name }}"
  register: igw

- name: Create Route Table {{ item.ec2_rt_name }} and IGW route 
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ item.ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ item.ec2_rt_name }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"

- name: Create Security Group {{ ec2_sg_name }}
  amazon.aws.ec2_group:
    name: "{{ item.ec2_sg_name }}"
    description: Allow all on ports
    state: present
    rules:
      - proto: tcp
        ports: "{{ item.ec2_sg_openports }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow all on ports
    region: "{{ item.ec2_vpc_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      name: "{{ item.ec2_sg_name }}"

- name: Get AMI by Name {{ item.ec2_image_name }}
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ item.ec2_image_name }}"
    region: "{{ item.ec2_vpc_region }}"
  register: ami_find

- name: Create RHEL instance {{ item.ec2_instance_name }}
  amazon.aws.ec2_instance:
    image_id: "{{ ami_find.images[-].image_id | default('') }}"
    instance_type: "{{ item.ec2_flavor_name }}"
    security_group: "{{ item.ec2_sg_name }}"
    name: "{{ item.ec2_instance_name }}"
    key_name: "{{ item.ec2_key_name }}"
    region: "{{ item.ec2_vpc_region }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      name: "{{ item.ec2_instance_name }}"
    volumes:
      - device_name: "{{ item.ec2_ebs_name | default('/dev/sda', true) }}"
        ebs:
          volume_size: "{{ item.ec2_disk_size | default(20, true) }}"
          delete_on_termination: true
    state: running
  register: ec2_instance

- name: Print instance details {{ item.ec2_instance_name }}
  ansible.builtin.debug:
    msg: "Instance DNS name is: {{ ec2_instance.instances[0].public_dns_name }} with IP address {{ ec2_instance.instances[0].public_ip_address }}"

- name: Wait until RHEL boots up {{ item.ec2_instance_name }}
  wait_for:
    port: 22
    state: started
    timeout: 300
    delay: 10
    host: "{{ ec2_instance.instances[0].public_dns_name }}"

- name: Sleep for additional 10 seconds {{ item.ec2_instance_name }}
  wait_for:
    timeout: 10
  delegate_to: localhost

