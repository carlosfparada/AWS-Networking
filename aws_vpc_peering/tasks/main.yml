---

- name: Create VPC 1 {{ ec2_vpc_name_1 }}
  amazon.aws.ec2_vpc_net:
    name: "{{ ec2_vpc_name_1 }}"
    cidr_block: "{{ ec2_vpc_cidr_1 }}"
    region: "{{ ec2_vpc_region_1 }}"
    state: present
    tags:
      name: "{{ ec2_vpc_name_1 }}"
  register: vpc_1

- name: Create Subnet in VPC 1
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_1.vpc.id }}"
    cidr: "{{ ec2_subnet_cidr_1 }}"
    region: "{{ ec2_vpc_region_1 }}"
    state: present
    tags:
      name: "{{ ec2_subnet_name_1 }}"
  register: subnet_1

- name: Create Internet Gateway (IGW) 1
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_1.vpc.id }}"
    region: "{{ ec2_vpc_region_1 }}"
    state: present
    tags:
      name: "{{ ec2_igw_name_1 }}"
  register: igw_1

- name: Create Route Table and IGW route 1
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc_1.vpc.id }}"
    region: "{{ ec2_vpc_region_1 }}"
    state: present
    tags:
      name: "{{ ec2_rt_name_1 }}"
    subnets:
      - "{{ subnet_1.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw_1.gateway_id_1 }}"

- name: Create Security Group
  amazon.aws.ec2_group:
    name: "{{ ec2_sg_name_1 }}"
    description: Allow all on ports
    state: present
    rules:
      - proto: tcp
        ports: "{{ ec2_sg_openports_1 }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow all on ports
    region: "{{ ec2_vpc_region_1 }}"
    vpc_id: "{{ vpc_1.vpc.id }}"
    tags:
      name: "{{ ec2_sg_name_1 }}"

- name: Get AMI by Name 1
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ ec2_image_name_1 }}"
    region: "{{ ec2_vpc_region_1 }}"
  register: ami_find_1

- name: Create RHEL instance 1
  amazon.aws.ec2_instance:
    image_id: "{{ ami_find_1.images[-1].image_id | default('') }}"
    instance_type: "{{ ec2_flavor_name_1 }}"
    security_group: "{{ ec2_sg_name_1 }}"
    name: "{{ ec2_instance_name_1 }}"
    key_name: "{{ ec2_key_name_1 }}"
    region: "{{ ec2_vpc_region_1 }}"
    vpc_subnet_id: "{{ subnet_1.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      name: "{{ ec2_instance_name_1 }}"
    volumes:
      - device_name: "{{ ec2_ebs_name_1 | default('/dev/sda1', true) }}"
        ebs:
          volume_size: "{{ ec2_disk_size_1 | default(20, true) }}"
          delete_on_termination: true
    state: running
  register: ec2_instance_1

- name: Print instance details
  ansible.builtin.debug:
    msg: "Instance DNS name is: {{ ec2_instance.instances[0].public_dns_name }} with IP address {{ ec2_instance.instances[0].public_ip_address }}"

- name: Wait until RHEL 1 boots up
  wait_for:
    port: 22
    state: started
    timeout: 300
    delay: 10
    host: "{{ ec2_instance_1.instances[0].public_dns_name }}"

- name: Sleep for additional 10 seconds
  wait_for:
    timeout: 10
  delegate_to: localhost